[MUSIC]
Welcome to Components of Cloud Computing expert viewpoints.
In this video we will listen to several cloud application professionals discuss
some of the factors considered in deciding between computing resources in the cloud.
For example, a bare metal server versus a virtual server versus containers.
>> Virtual servers are basically running a different OS inside
of another operating system.
An example would be running Windows on top of Linux.
And as such, they contain their own complete OS.
So VMs look and act very much like physical servers.
And because they contain the whole OS,
they're typically gigabytes in size, quite large.
VMs are far less portable because of their dependence on
the operating system, the application and library versions.
So that's a consideration with virtual machines.
>> When it comes to deciding between containers, virtual servers,
and bare metal servers, I'm almost always drawn to containers to start.
Because of their scalability and their cost efficiency.
However, that doesn't mean they're always the best option.
For example, you might not be able to tolerate your containers running on
the same VM as another customer's for security reasons.
And in that case you might decide to provision your own virtual server.
Or perhaps you just consistently need the best performance possible and
you don't want to deal with the hypervisor tax or noisy neighbor effects.
And in that case you'll go with bare metal.
>> Containers are based on a Linux-based shared image that can be shared
across environments, Dev, QA, and production.
And this is one very big advantage of containers.
It's also possible to spin up containers very fast,
milliseconds instead of seconds, for virtual machines.
They're lightweight, typically megabytes in size,
and the key technologies here are Docker, Kubernetes,
and OpenShift for container orchestration.
And some of the compelling use cases here are where workloads
can be broken into the smallest serviceable units.
Here you could think about microservices, for example,
and this is perhaps a foundational technology for
what's referred to as cloud native architecture.
>> If you want to have something that doesn't cost as much and
only runs when needed, that's a perfect use case for serverless functions.
Because on some cloud providers,
they only charge you as little as by the millisecond of usage.
And serverless functions help you not use any time
on work like patching up the operating system.
And if you want to be cloud agnostic,
meaning you want to have a hybrid cloud setup,
meaning be on different cloud providers at the same time,
then containers can be a really good choice because
Docker runs the same anywhere.
>> So, in the past few years,
I've actually seen containers come quite a long way,
especially in the enterprise space, with Kubernetes and OpenShift and other things.
Quite frankly,
containers can run almost any workload you might want to throw at it.
There are some exceptions, sometimes you need a special video card and
a bare metal machine, or need to access kernel-level settings and the like,
which you can't in a container.
But for the most part, I would say you're going to use containers or
serverless unless you have a specific need not to.
>> Bare metal servers are basically a single
tenant dedicated hardware server.
This is our legacy hardware approach.
Advantages, you can optimize the server according to the specific needs for
performance, security, and reliability.
The disadvantages, however, are, limits on on-demand scalability,
that the hardware has a fixed capacity.
And flat monthly pricing for bare metal servers.
Use cases, there are use cases where bare metal servers make sense.
Some of these might be things requiring very high performance.
Think about gaming, or real time analytics, or
situations where regulatory or compliance requirements
dictate a dedicated compute environment.
Or applications that use steady and continuous compute resources.
>> If you need extreme speed and a lot of processing power,
let's say you're iterating over a design for a supersonic jet and
you need to model how it would act in a wind tunnel and
you need to do that 500 times.
That's a whole lot of data to process.
And you want to use the most powerful machines in a cluster and
have them be as close together as possible.
So, that's bare metal machines.
[MUSIC]